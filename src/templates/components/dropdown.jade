include input

mixin dropdown(options, elements, defaultText)
	if (typeof(options) !== 'object')
		- options = {name: options}
		- options["elements"] = elements || []
		- options["defaultText"] = defaultText || ""
		- console.log("ERROR: use of dropdown mixin deprecated! in ", options.name);

	- options["type"] = options.type || "dropdown_default"
	case options.type
		when "dropdown_default"
			+dropdown_default(options)
		when "input_dropdown"
			+input_dropdown(options)
		when "dropDown_selector"
			+dropDown_selector(options)
		when "dropDown_selector_preopt"
			+dropDown_selector_preopt(options)
		when "dropDown_selector_id"
			+dropDown_selector_id(options)
		when "dropDown_selector_custom"
			+dropDown_selector_custom(options)
		when "dropDown_timezone_select"
			+dropDown_timezone_select(options)
		when "dropdown_time"
			+dropdown_time(options)
		when "dropDown_hours"
			+dropDown_hours(options)
		when "dropDown_seconds"
			+dropDown_seconds(options)
		when "dropDown_minutes"
			+dropDown_minutes(options)

mixin dropdown_by_values(options)
	- options.name = options.name || ''
	- options.cur  = options.cur  || ''
	- options.min  = options.min  || 0
	- options.max  = options.max  || 100
	- options.res  = options.res  || 1
	- options.unit = options.unit || ''

	div.dropdown(id='#{options.name}')
		div.dropdown-toggle(data-toggle="dropdown")
			span.caret
			input(data-value='#{options.cur}', data-owner='#{options.name}', value="#{options.cur}" ,readonly)
		ul.dropdown-menu(data-role="menu")
			- for(var i = options.min; i <= options.max; i += options.res)
				if options.cur === i
					li.selected(data-owner='#{options.name}', data-role="menuitem" , data-value='#{i}') #{i}
				else
					li(data-owner='#{options.name}', data-role="menuitem" , data-value='#{i}') #{i}
	span.unit #{options.unit}

mixin input_dropdown(options)
	.dropdown.selector.ddInput(id='#{options.name}')
		.dropdown-toggle.input(data-name='#{options.name}')

			span.caret
			each operator, index in options.list
				if operator.selected
					span.selected(data-index='#{index}', data-ID='#{operator.ID}') #{operator.name}
						span.close x

			if locals.ddValueList
				each item, index in locals.ddValueList
					- options.placeholder = ""
					span.selected(data-index='#{index}', data-id='#{index}') #{item}
						span.close x

			span.dropdownInput
				+inputfields({type: options.type ,name: options.name, classes: 'dropdownInputField', placeholder: options.placeholder, listId: options.listId, list: options.list})

		ul.dropdown-menu
			each operator, index in options.list
				li(class="#{operator.selected ? 'selected' : ''}" , data-index='#{index}', data-ID='#{index}')
					span(value="#{operator}") #{operator}



mixin dropdown_default(name, elements, defaultText)
	if (typeof(elements) == 'undefined' && typeof(name) == 'object')
		- defaultText = name.defaultText || ""
		- elements = name.elements || []
		- name = name.name || ""
	else
		- throw("deprecated use of dropdown_selector! for " + name);

	.dropdown(id='#{name}')
		.dropdown-toggle
			span.caret
			- anyselected = false
			each element, index in elements
				if element.selected
					span.selected(data-index='#{index}', data-ID='#{element.ID}') #{element.name}
					- anyselected = true
			if !anyselected
				span.default translate:#{defaultText}
		ul.dropdown-menu
			each element, index in elements
				li(class="#{element.selected ? 'selected' : ''}" , data-index='#{index}', data-ID='#{element.ID}')
					span #{element.name}

mixin dropDown_selector(name, elements, defaultText)
	if (typeof(elements) == 'undefined' && typeof(name) == 'object')
		- defaultText = name.defaultText || ""
		- elements = name.elements || []
		- name = name.name || ""
	else
		- throw("deprecated use of dropdown_selector! for " + name);

	.dropdown.selector(id='#{name}')
		.dropdown-toggle
			span.caret
			- anyselected = false
			each operator, index in elements
				if operator.selected
					span.selected(data-name='#{name}', data-index='#{index}', data-ID='#{operator.ID}') #{operator.name}
						span.close &times;
					- anyselected = true
			if !anyselected
				span.default translate:#{defaultText}
		ul.dropdown-menu
			each operator, index in elements
				li(class="#{operator.selected ? 'selected' : ''}", data-name='#{name}', data-index='#{index}', data-ID='#{operator.ID}')
					span #{operator.name}


mixin dropDown_selector_preopt(name, elements, defaultText)
	if (typeof(elements) == 'undefined' && typeof(name) == 'object')
		- defaultText = name.defaultText || "maintenance.rf_measurement.pim.all.rus"
		- elements = name.elements || []
		- name = name.name || ""
		- id = name.id || ""
		- selected = name.selected || ""
		- value = name.value || ""
	else
		- throw("deprecated use of dropdown_selector! for " + name);

	.dropdown.selector.preoptimizationZone(id='#{id}')
		.dropdown-toggle
			span.caret
			span.default translate:#{defaultText}
		ul.dropdown-menu
			each operator, index in elements
				li(class="#{operator ? 'operator' : ''}", data-name='#{name}', data-value='#{index}', data-index='#{index}', data-ID='#{operator.ID}')
					span #{operator}


mixin dropDown_selector_id(name, elements, defaultText)
	if (typeof(elements) == 'undefined' && typeof(name) == 'object')
		- defaultText = name.defaultText || ""
		- elements = name.elements || []
		- options = name || {}
		- name = name.name || ""
	else
		- throw("deprecated use of dropdown_selector_id! for " + name);

	.dropdown.selector.ddSelectId(id='#{name}')
		.dropdown-toggle
			span.caret
			- anyselected = false
			each value, index in elements
				if value == options.value
					span.selected(data-index='#{index}', name='#{value}') #{value}
						span.close x
					- anyselected = true
			if !anyselected
				span.default(name='#{name}') translate:#{defaultText}
		ul.dropdown-menu
			each value, index in elements
				li(class="#{value == options.value ? 'selected' : ''}" , data-index='#{index}', data-target='#{value}')
					span #{value}


mixin dropDown_selector_custom(name, elements, defaultText)
	if (typeof(elements) == 'undefined' && typeof(name) == 'object')
		- defaultText = name.defaultText || ""
		- elements = name.elements || []
		- name = name.name || ""
	else
		- throw("deprecated use of dropdown_selector_custom! for " + name);

	.dropdown.selector(id='#{name}')
		.dropdown-toggle
			span.caret
			- anyselected = false
			each operator, index in elements
				if operator.selected
					span.selected(data-index='#{index}', data-ID='#{operator.ID}') #{operator.name}
						span.close x
					- anyselected = true
			if !anyselected
				span.default translate:#{defaultText}
		ul.dropdown-menu
			each operator, index in elements
				li(class="#{operator.selected ? 'selected' : ''}" , data-index='#{index}', data-ID='#{operator.ID}')
					span #{operator.name}
			li(class="custom", data-type="custom", id="custom")
				span custom

mixin dropDown_select(name, value, elements)
	div.dropdown(id='#{name}')
		div.dropdown-toggle(data-toggle="dropdown")
			span.caret
			input(data-value='#{value}', data-owner='#{name}', value="#{value}" ,readonly)
		ul.dropdown-menu(data-role="menu")
			each element in elements
				if element.value === value
					li.selected(data-owner='#{name}', data-role="menuitem" , data-value='#{element.value}', data-ID='#{element.id}') #{element.value}
				else
					li(data-owner='#{name}', data-role="menuitem" , data-value='#{element.value}', data-ID='#{element.id}') #{element.value}

mixin dropDown_timezone_select(name, value, elements)
	div.dropdown.EditTimeDropDown.pickerTimezone.timezone(id='#{name}')
		div.dropdown-toggle(data-toggle="dropdown")
			span.caret
			input(data-value='#{value}', data-owner='#{name}', value='#{value}' , readonly)
		ul.dropdown-menu(data-role="menu")
			each zone in elements
				if zone === value
					li.selected(data-owner='#{name}', data-role="menuitem" , data-value='#{zone}', data-ID='#{index}') #{zone}
				else
					li(data-owner='#{name}', data-role="menuitem" , data-value='#{zone}', data-ID='#{index}') #{zone}

mixin dropdown_time(options)
	if (options.value == "")
		-options.value = '12'
	if (options.name == "hours" || options.name == "from_time" || options.name == "to_time")
		-options.maxnumber = options.maxnumber || 23
	if (options.name == "minutes" || options.name == "seconds")
		-options.maxnumber = 59
	- options.minnumber = options.minnumber || 0

	-options.value = parseInt(options.value)
	.dropdown.timeDropDown.timePicker(id='#{options.name}')
		.dropdown-toggle(data-toggle="dropdown", name="#{options.name}")
			span.caret
			if (options.value <= 9)
				input(name='#{options.name}', data-owner='#{options.name}', value='0#{options.value}:00', data-value='0#{index}:00')
			else
				input(name='#{options.name}', data-owner='#{options.name}', value='#{options.value}:00', data-value='#{index}:00')
		ul.dropdown-menu(data-role="menu", name="#{options.name}")
			-for (var index = options.minnumber; index <= options.maxnumber; index++)
				if index == options.value
					if index <= 9
						li.selected(name='#{options.name}', data-owner='#{options.name}', data-role="menuitem" , data-value='0#{index}:00', data-ID='#{index}') 0#{index}:00
					else
						li.selected(name='#{options.name}', data-owner='#{options.name}', data-role="menuitem" , data-value='#{index}:00', data-ID='#{index}') #{index}:00
				else
					if index <= 9
						li(name='#{options.name}', data-owner='#{options.name}', data-role="menuitem" , data-value='0#{index}:00', data-ID='#{index}') 0#{index}:00
					else
						li(name='#{options.name}', data-owner='#{options.name}', data-role="menuitem" , data-value='#{index}:00', data-ID='#{index}') #{index}:00

mixin dropdown_hms(options)
	if (options.value == "")
		-options.value = '12'
	if (options.name == "hours" || options.name == "from_time" || options.name == "to_time")
		-options.maxnumber = 23
	if (options.name == "minutes" || options.name == "seconds")
		-options.maxnumber = 59

	-options.value = parseInt(options.value)
	.dropdown.timeDropDown.timePicker(id='#{options.name}')
		.dropdown-toggle(data-toggle="dropdown", name="#{options.name}")
			span.caret
			if (options.value <= 9)
				input(name='#{options.name}', data-owner='#{options.name}', value='0#{options.value}', data-value='0#{index}')
			else
				input(name='#{options.name}', data-owner='#{options.name}', value='#{options.value}', data-value='#{index}')
		ul.dropdown-menu(data-role="menu", name="#{options.name}")
			-for (var index = 0; index <= options.maxnumber; index++)
				if index == options.value
					if index <= 9
						li.selected(name='#{options.name}', data-owner='#{options.name}', data-role="menuitem" , data-value='0#{index}', data-ID='#{index}') 0#{index}
					else
						li.selected(name='#{options.name}', data-owner='#{options.name}', data-role="menuitem" , data-value='#{index}', data-ID='#{index}') #{index}
				else
					if index <= 9
						li(name='#{options.name}', data-owner='#{options.name}', data-role="menuitem" , data-value='0#{index}', data-ID='#{index}') 0#{index}
					else
						li(name='#{options.name}', data-owner='#{options.name}', data-role="menuitem" , data-value='#{index}', data-ID='#{index}') #{index}


