include form_ip

//-
	Mixins
		_input 			: is a mixin for a single inputfield without unit
		_input_unit 	: is a mixin for a inputfield with unitlabel


	options:  Attributes
		name 		: string, 	id, name of element
		placeholder : string, 	placeholder when input empty
		value		: string, 	text in inputfield
		unit 		: string, 	unit (string, exp.:  MHz, KHz)
		size 		: string/number, 	characters
		maxlength 	: string/number, 	max characters
		minlength 	: string/number, 	max characters
		inactiv		: boolean, 	inactive field, means different style
		error		: boolean, 	error style -> red version
		icon 		: string,	icon.classname
		iconOutside : boolean,	icon is right next to inputfield

		iconLabel 	: string, 	label right beside inputfield and icon

		autofocus 	: boolean,	autofocus on inputfield

		insideTable : boolean,  input needs different styling to adjust to table

		type:		: string, 	kind of inputfield
			ip 			: ip field

		autocomplete	: true as default
		disabled		: false as default
		listId			: identifier for datalist (necessary for list)
		list			: Refers to a <datalist> element that contains pre-defined options for an <input> element

		multiple		: for selecting multiple files when browsing for files
		checked			: preselected element on page load
		readonly		: default false
		classes			: input field classes
		id 				' id of inputfield
		autocomplete	: default off, to enable use true or 'on'

//-NORMAL
//- mixin for normal inputfield
mixin inputfields(options)
	//- if (options.type == 'ip')
	//- 	-options.placeholder ='ip'
	//- 	-options.type = 'text'
	//- 	-options.maxlength = '3'
	//- 	-options.minlength = '1'
	//- 	-options.size = '3'
	//- 	-options.ipField = 'ipField'
	//- if (options.unit)
	//- 	-options.size = '10'

	if (options.inactive == true)
		-options.disabled = true

	if (options.value === 0)
		-options.value = '0'

	if (options.value == "")
		-options.value = ''

	if (options.type == 'ip')
		+form_ip(options.name, options.value, options.disabled)
	else
		.ion-inputfieldContainer(class="#{options.ipField ? options.ipField : ''} #{options.unit ? ' unit' : ''} #{options.insideTable ? 'insideTable':''} #{options.error ? 'error':''}", name="#{options.id ? options.id : ''}")

			if (options.autofocus == true)
				input.ion-inputfield(type="#{options.type ? options.type : 'text'}", name="#{options.name}", id="#{options.id ? options.id : ''}", placeholder="#{options.placeholder ? 'translate:'+options.placeholder : ''}", value="#{options.value ? options.value : ''}", size="#{options.size ? options.size : ''}", maxlength="#{options.maxlength ? options.maxlength : '255'}", minlength="#{options.minlength ? options.minlength : '4'}", class="#{options.classes ? options.classes : ''} #{options.ipField ? options.ipField : ''}", list="#{options.listId ? options.listId : ''}", minHelp="#{options.minHelp ? options.minHelp : ''}", maxHelp="#{options.maxHelp ? options.maxHelp : ''}", data-target="#{options.target ? options.target : ''}", autofocus)
			else if (options.readonly == true)
				input.ion-inputfield(type="#{options.type ? options.type : 'text'}", name="#{options.name}", id="#{options.id ? options.id : ''}", placeholder="#{options.placeholder ? 'translate:'+options.placeholder : ''}", value="#{options.value ? options.value : ''}", size="#{options.size ? options.size : ''}", maxlength="#{options.maxlength ? options.maxlength : '255'}", minlength="#{options.minlength ? options.minlength : '4'}", class="#{options.classes ? options.classes : ''} #{options.ipField ? options.ipField : ''} ", list="#{options.listId ? options.listId : ''}", minHelp="#{options.minHelp ? options.minHelp : ''}", maxHelp="#{options.maxHelp ? options.maxHelp : ''}", data-target="#{options.target ? options.target : ''}", readonly)
			else if (options.disabled == true)
				input.ion-inputfield(type="#{options.type ? options.type : 'text'}", name="#{options.name}", id="#{options.id ? options.id : ''}", placeholder="#{options.placeholder ? 'translate:'+options.placeholder : ''}", value="#{options.value ? options.value : ''}", size="#{options.size ? options.size : ''}", maxlength="#{options.maxlength ? options.maxlength : '255'}", minlength="#{options.minlength ? options.minlength : '4'}", class="#{options.classes ? options.classes : ''} #{options.ipField ? options.ipField : ''} ", list="#{options.listId ? options.listId : ''}", minHelp="#{options.minHelp ? options.minHelp : ''}", maxHelp="#{options.maxHelp ? options.maxHelp : ''}", data-target="#{options.target ? options.target : ''}", disabled)
			else if (options.checked == true)
				input.ion-inputfield(type="#{options.type ? options.type : 'text'}", name="#{options.name}", id="#{options.id ? options.id : ''}", placeholder="#{options.placeholder ? 'translate:'+options.placeholder : ''}", value="#{options.value ? options.value : ''}", size="#{options.size ? options.size : ''}", maxlength="#{options.maxlength ? options.maxlength : '255'}", minlength="#{options.minlength ? options.minlength : '4'}", class="#{options.classes ? options.classes : ''} #{options.ipField ? options.ipField : ''} ", list="#{options.listId ? options.listId : ''}", minHelp="#{options.minHelp ? options.minHelp : ''}", maxHelp="#{options.maxHelp ? options.maxHelp : ''}", data-target="#{options.target ? options.target : ''}", checked)
			else if (options.autocomplete == true || options.autocomplete == 'on')
				input.ion-inputfield(type="#{options.type ? options.type : 'text'}", name="#{options.name}", id="#{options.id ? options.id : ''}", placeholder="#{options.placeholder ? 'translate:'+options.placeholder : ''}", value="#{options.value ? options.value : ''}", size="#{options.size ? options.size : ''}", maxlength="#{options.maxlength ? options.maxlength : '255'}", minlength="#{options.minlength ? options.minlength : '4'}", class="#{options.classes ? options.classes : ''} #{options.ipField ? options.ipField : ''} ", list="#{options.listId ? options.listId : ''}", minHelp="#{options.minHelp ? options.minHelp : ''}", maxHelp="#{options.maxHelp ? options.maxHelp : ''}", data-target="#{options.target ? options.target : ''}", autocomplete="on")
			else
				input.ion-inputfield(type="#{options.type ? options.type : 'text'}", name="#{options.name}", id="#{options.id ? options.id : ''}", placeholder="#{(options.placeholder != '********') ? ((options.placeholder) ? 'translate:'+options.placeholder : '' ) : '********'}", value="#{options.value ? options.value : ''}", size="#{options.size ? options.size : ''}", maxlength="#{options.maxlength ? options.maxlength : '255'}", minlength="#{options.minlength ? options.minlength : '4'}", class="#{options.classes ? options.classes : ''} #{options.ipField ? options.ipField : ''} ", list="#{options.listId ? options.listId : ''}", minHelp="#{options.minHelp ? options.minHelp : ''}", maxHelp="#{options.maxHelp ? options.maxHelp : ''}", data-target="#{options.target ? options.target : ''}")

			if (options.unit)
				span.unitLabel(class="#{options.error ? 'error':''} #{options.success ? 'success':''}") #{options.unit}

			if (options.icon)
				span.icon(class="#{options.icon}")
			if (options.iconLabel)
				span.iconLabel translate:#{options.iconLabel}

			if (options.listId)
				datalist(id="#{options.listId}", class="datalist")
					each item, index in options.list
						option(class="datalistOption", data-index="#{index}", value="#{item}")
	block




